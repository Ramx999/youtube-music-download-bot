from os import remove

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, InputFile

from tgbot import MAX_VIDEO_DURATION, BANNED_CONTENT
from tgbot.keyboards import print_search_results
from tgbot.misc import Actions
from tgbot.services import youtube_link, download, search_result


async def unknown_message(message: Message, state: FSMContext) -> None:
    """
    Handles messages containing BANNED_CONTENT.

    :param state: State from FSM
    :param message: Message from the user
    :return: None
    """
    async with state.proxy() as data:
        if data.state == 'Actions:Lock':
            await message.delete()
        else:
            await message.reply(text='ü§∑ –Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å.\n\n'
                                     '–ù–∞–ø–∏—à–∏ –º–Ω–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏</b> –∏–ª–∏ —Å–±—Ä–æ—Å—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ —Å '
                                     '<a href="https://www.youtube.com">YouTube</a>')


async def messages(message: Message, state: FSMContext) -> None:
    """
    Handles messages from the user that do not contain BANNED_CONTENT.

    :param state: State from FSM
    :param message: Message from the user
    :return: None
    """
    if youtube_link(text=message.text):
        await message.answer(text='‚è¨ –ö–∞—á–∞—é..')
        await Actions.Lock.set()  # Block user actions while the download is in progress.
        audio_file: str = download(url=message.text)
        if audio_file[-3:] == 'mp3':
            await message.answer_audio(InputFile(path_or_bytesio=audio_file))
            remove(audio_file)
        elif audio_file[15:21] == 'stream':
            await message.answer(text='‚ùå –Ø –Ω–µ –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å –∂–∏–≤—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏!\n\n'
                                      '–ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. üôÅ')
        elif audio_file == 'Video is too long':
            await message.answer(text=f'‚ùå –£–ø—Å..\n\n'
                                      f'–≠—Ç–æ –≤–∏–¥–µ–æ –¥–ª–∏—Ç—Å—è –±–æ–ª—å—à–µ {round(MAX_VIDEO_DURATION / 60)} –º–∏–Ω—É—Ç!\n'
                                      f'–ù–∞–π–¥–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–∫–æ—Ä–æ—á–µ. üòí')
        else:
            await message.answer(text='‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞!\n\n'
                                      '–ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞—á–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. üôÅ')
        await state.reset_state()  # Download completed, unblock user actions.
    else:
        msg = await message.reply(text='üîç –ò—â—É..')
        await Actions.Lock.set()  # Block user actions while the search is in progress.
        search = search_result(search_query=message.text)
        if not search:
            await message.bot.edit_message_text(text='‚ùå –£–ø—Å..\n\n'
                                                     '–Ø –Ω–µ –º–æ–≥—É —ç—Ç–æ –Ω–∞–π—Ç–∏.\n'
                                                     '–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∏—Å–∫–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. üòí',
                                                chat_id=msg.chat.id, message_id=msg.message_id)
        else:
            await message.bot.edit_message_text(text='üëá –°–º–æ—Ç—Ä–∏, —á—Ç–æ —è –Ω–∞—à–µ–ª:',
                                                chat_id=msg.chat.id, message_id=msg.message_id)
            await print_search_results(search, message)
        await state.reset_state()  # Search completed, unblock user actions.


async def lock_messages(message: Message) -> None:
    """
    The stub function, deletes messages from the user while the user's actions are blocked.

    :param message: Message from the user
    :return: None
    """
    await message.delete()


def register_messages(dp: Dispatcher) -> None:
    """
    Registers the handling of messages from the user in the Dispatcher.

    :param dp: Dispatcher
    :return: None
    """
    dp.register_message_handler(unknown_message, content_types=BANNED_CONTENT, state='*')
    dp.register_message_handler(messages, content_types='text', state=None)
    dp.register_message_handler(lock_messages, content_types='text', state=Actions.Lock)
